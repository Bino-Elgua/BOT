version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - SECRET_KEY=ðŸ”‘ SECRET_KEY
      - DATABASE_URL=postgresql://botuser:ðŸ”‘ DB_PASSWORD@postgres:5432/botdb
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=botdb
      - POSTGRES_USER=botuser
      - POSTGRES_PASSWORD=ðŸ”‘ DB_PASSWORD
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U botuser -d botdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Development services
  adminer:
    image: adminer:4-standalone
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - bot-network
    profiles:
      - dev

  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - bot-network
    profiles:
      - dev

volumes:
  postgres_data:
  redis_data:

networks:
  bot-network:
    driver: bridge